{"version":3,"sources":["api/book/book.controller.js"],"names":["getAll","getBest","getBySlug","create","update","remove","changeCover","changeEpub","rate","sendLink","download","_","fs","promisifyAll","require","normalize","validationError","res","statusCode","err","status","json","handleError","console","log","send","req","query","parse","url","filter","paid","sortBy","search","$or","title","RegExp","author","sort","find","exec","then","books","catch","rating","findOneAndUpdate","slug","params","$inc","views","book","newBook","body","save","findOne","extend","coverUrl","epubUrl","unlinkAsync","__dirname","end","files","file","mimetype","indexOf","message","path","width","height","pathTo","imgPath","index","tmpPath","slice","epubPath","renameAsync","findById","id","total_rates","total_rating","Math","ceil"],"mappings":"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","file":"book.controller.js","sourcesContent":["'use strict';\n\nimport Book from './book.model';\nimport { loadImage } from '../../components/images';\nimport { removeImage } from '../../components/images';\nimport * as _ from 'lodash';\nimport Promise from 'bluebird';\nimport url from 'url';\nconst fs = Promise.promisifyAll(require('fs'));\nconst normalize = require('path').normalize;\n\nfunction validationError(res, statusCode) {\n  statusCode = statusCode || 422;\n  return function(err) {\n    return res.status(statusCode).json(err);\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    console.log(err);\n    return res.status(statusCode).send(err);\n  };\n}\n\n/**\n * Gets book's list optionally filtered\n */\nexport function getAll(req, res) {\n  let query = url.parse(req.url, true).query,\n    filter = { paid: query.paid === 'true' },\n    sortBy;\n\n  if(query.search) {\n    filter.$or = [{ title: new RegExp(`^${query.search}`, \"i\") }, { author: new RegExp(`^${query.search}`, \"i\") }];\n  }\n\n  if(query.sort) {\n    sortBy = `-${query.sort}`;\n  } else {\n    sortBy = 'title';\n  }\n\n  return Book.find(filter)\n    .sort(sortBy).exec()\n    .then(books => {\n      res.json(books);\n    })\n    .catch(handleError(res));\n}\n\n/**\n * Gets best by rating books\n */\nexport function getBest(req, res) {\n  return Book.find({ rating: 5 })\n    .sort('-added_at')\n    .exec()\n    .then(books => {\n      res.json(books);\n    })\n    .catch(handleError(res));\n}\n\n/**\n * Gets book by slug\n */\nexport function getBySlug(req, res) {\n  return Book.findOneAndUpdate({ slug: req.params.slug }, {$inc: {views:1} }).exec()\n    .then(book => {\n      res.json(book);\n    })\n    .catch(handleError(res));\n}\n\n/**\n * Creates a new book\n */\nexport function create(req, res) {\n  let newBook = new Book(req.body);\n\n  newBook.save()\n    .then(book => {\n      res.json(book);\n    })\n    .catch(validationError(res));\n}\n\n/**\n * Updates an existing book\n */\nexport function update(req, res) {\n  return Book.findOne({ slug: req.params.slug }).exec()\n    .then(book => {\n      _.extend(book, req.body);\n      return book.save();\n    })\n    .then(book => {\n      res.json(book);\n    })\n    .catch(validationError(res));\n}\n\n/**\n * Removes an existing book\n */\nexport function remove(req, res) {\n  let coverUrl, epubUrl;\n\n  return Book.findOne({ slug: req.params.slug }).exec()\n    .then(book => {\n      coverUrl = book.coverUrl;\n      epubUrl = book.epubUrl;\n      return book.remove();\n    })\n    .then(() => {\n      return removeImage(coverUrl);\n    })\n    .then(() => {\n      return fs.unlinkAsync(normalize(__dirname + '/../../..' + epubUrl));\n    })\n    .then(() => {\n      res.end();\n    })\n    .catch(validationError(res));\n}\n\n/**\n * Updates a book's cover\n */\nexport function changeCover(req, res) {\n  return Book.findOne({ slug: req.params.slug }).exec()\n    .then(book => {\n      // check if files have valid mimetype\n      if(req.files.file.mimetype.indexOf('jpeg') === -1 && req.files.file.mimetype.indexOf('png') === -1) {\n        return res.status(400).send({\n          message: 'Image should be in JPEG or PNG format'\n        });\n      }\n      // if cover already exists, remove it first\n      if(book.coverUrl) {\n        return removeImage(book.coverUrl)\n          .then(() => {\n            return loadImage(req.files.file.path, {\n              width: 200,\n              height: 275,\n              pathTo: '/books/covers'\n            })\n            .then(imgPath => {\n              book.coverUrl = imgPath;\n              return book.save();\n            })\n            .then(book => {\n              res.json(book);\n            });\n          })\n          .catch(handleError(res));\n      } else {\n        return loadImage(req.files.file.path, {\n          width: 200,\n          height: 275,\n          pathTo: '/books/covers'\n        })\n        .then(imgPath => {\n          book.coverUrl = imgPath;\n          return book.save();\n        })\n        .then(book => {\n          res.json(book);\n        })\n        .catch(handleError(res));\n      }\n    })\n    .catch(handleError(res));\n}\n\n/**\n * Updates a book's epub\n */\nexport function changeEpub(req, res) {\n  let epubUrl;\n\n  return Book.findOne({ slug: req.params.slug }).exec()\n    .then(book => {\n      // check if files have valid mimetype\n      if(req.files.file.mimetype.indexOf('epub') === -1) {\n        return res.status(400).send({\n          message: 'Image should be in EPUB format'\n        });\n      }\n\n      // if there is epub file, remove it first\n      if(book.epubUrl) {\n        return fs.unlinkAsync(normalize(__dirname + '/../../..' + book.epubUrl))\n        .then(() => {\n          const index = req.files.file.path.indexOf('uploads');\n          const tmpPath = req.files.file.path.slice(index + 7);\n          const epubPath = normalize(__dirname + '/../../../fs/books/epubs' + tmpPath);\n          epubUrl = '/fs/books/epubs' + tmpPath;\n          return fs.renameAsync(req.files.file.path, epubPath);\n        })\n        .then(() => {\n          book.epubUrl = epubUrl;\n          return book.save();\n        })\n        .then(book => {\n          res.json(book);\n        })\n        .catch(handleError(res));\n      } else {\n        const index = req.files.file.path.indexOf('uploads');\n        const tmpPath = req.files.file.path.slice(index + 7);\n        const epubPath = normalize(__dirname + '/../../../fs/books/epubs' + tmpPath);\n        epubUrl = '/fs/books/epubs' + tmpPath;\n        return fs.renameAsync(req.files.file.path, epubPath)\n        .then(() => {\n          book.epubUrl = epubUrl;\n          return book.save();\n        })\n        .then(book => {\n          res.json(book);\n        })\n        .catch(handleError(res));\n      }\n    })\n    .catch(handleError(res));\n}\n\n/**\n * Updates rating to book\n */\nexport function rate(req, res) {\n  return Book.findById(req.params.id).exec()\n    .then(book => {\n      const total_rates = book.total_rates + 1;\n      const total_rating = book.total_rating + req.body.rating;\n      const rating = Math.ceil(total_rating / total_rates);\n      book.total_rates = total_rates;\n      book.total_rating = total_rating;\n      book.rating = rating;\n      return book.save();\n    })\n    .then(() => {\n      res.end();\n    })\n    .catch(handleError(res));\n}\n\n// check credit card and send link for downloading\nexport function sendLink(req, res) {\n  // checking credit card number req.body.card\n  // if(req.body.card) isValid, start downloading\n  return Book.findById(req.params.id).exec()\n    .then(book => {\n      if(!book) {\n        return res.status(404).json({ message: 'Book Not Found!' });\n      }\n      res.json({ url: book.epubUrl });\n    })\n    .catch(handleError);\n}\n\n// downloads file\nexport function download(req, res) {\n  let file = normalize(__dirname + '../../../../' + req.params.url);\n  res.download(file);\n}\n"]}