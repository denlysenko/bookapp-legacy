{"version":3,"sources":["api/history/history.controller.js"],"names":["getAll","save","handleError","res","statusCode","err","console","log","status","send","req","findOne","userId","user","_id","exec","then","json","history","catch","actions","push","desc","body","newHistory"],"mappings":"AAAA;;;;;QAegBA,M,GAAAA,M;QAYAC,I,GAAAA,I;;AAzBhB;;;;;;AAEA,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,UAA1B,EAAsC;AACpCA,eAAaA,cAAc,GAA3B;AACA,SAAO,UAASC,GAAT,EAAc;AACnBC,YAAQC,GAAR,CAAYF,GAAZ;AACA,WAAOF,IAAIK,MAAJ,CAAWJ,UAAX,EAAuBK,IAAvB,CAA4BJ,GAA5B,CAAP;AACD,GAHD;AAID;;AAED;;;AAGO,SAASL,MAAT,CAAgBU,GAAhB,EAAqBP,GAArB,EAA0B;AAC/B,SAAO,kBAAQQ,OAAR,CAAgB,EAAEC,QAAQF,IAAIG,IAAJ,CAASC,GAAnB,EAAhB,EACJC,IADI,GAEJC,IAFI,CAEC,mBAAW;AACfb,QAAIc,IAAJ,CAASC,OAAT;AACD,GAJI,EAKJC,KALI,CAKEjB,YAAYC,GAAZ,CALF,CAAP;AAMD;;AAED;;;AAGO,SAASF,IAAT,CAAcS,GAAd,EAAmBP,GAAnB,EAAwB;AAC7B,MAAMS,SAASF,IAAIG,IAAJ,CAASC,GAAxB;AACA,SAAO,kBAAQH,OAAR,CAAgB,EAAEC,QAAQA,MAAV,EAAhB,EACJG,IADI,GAEJC,IAFI,CAEC,mBAAW;AACf,QAAGE,OAAH,EAAY;AACVA,cAAQE,OAAR,CAAgBC,IAAhB,CAAqB,EAAEC,MAAMZ,IAAIa,IAAJ,CAASD,IAAjB,EAArB;AACA,aAAOJ,QAAQjB,IAAR,EAAP;AACD,KAHD,MAGO;AACL,UAAIuB,aAAa,sBAAY;AAC3BZ,gBAAQA,MADmB;AAE3BQ,iBAAS,CAAC,EAAEE,MAAMZ,IAAIa,IAAJ,CAASD,IAAjB,EAAD;AAFkB,OAAZ,CAAjB;AAIA,aAAOE,WAAWvB,IAAX,EAAP;AACD;AACF,GAbI,EAcJe,IAdI,CAcC,mBAAW;AACfb,QAAIc,IAAJ,CAASC,OAAT;AACD,GAhBI,EAiBJC,KAjBI,CAiBEjB,YAAYC,GAAZ,CAjBF,CAAP;AAkBD","file":"history.controller.js","sourcesContent":["'use strict';\n\nimport History from './history.model';\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    console.log(err);\n    return res.status(statusCode).send(err);\n  };\n}\n\n/**\n * Gets all actions by user, optionally limited\n */\nexport function getAll(req, res) {\n  return History.findOne({ userId: req.user._id })\n    .exec()\n    .then(history => {\n      res.json(history);\n    })\n    .catch(handleError(res));\n}\n\n/**\n * Creates new history if not exists or add new action if exists\n */\nexport function save(req, res) {\n  const userId = req.user._id;\n  return History.findOne({ userId: userId })\n    .exec()\n    .then(history => {\n      if(history) {\n        history.actions.push({ desc: req.body.desc });\n        return history.save();\n      } else {\n        let newHistory = new History({\n          userId: userId,\n          actions: [{ desc: req.body.desc }]\n        });\n        return newHistory.save();\n      }\n    })\n    .then(history => {\n      res.json(history);\n    })\n    .catch(handleError(res));\n}\n"]}