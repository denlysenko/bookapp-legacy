{"version":3,"sources":["api/comment/comment.controller.js"],"names":["getAll","save","handleError","res","statusCode","err","console","log","status","send","req","findOne","bookId","params","populate","path","select","model","exec","then","json","comment","catch","messages","push","author","user","_id","created_at","Date","now","text","body","newComment","execPopulate"],"mappings":"AAAA;;;;;QAgBgBA,M,GAAAA,M;QAiBAC,I,GAAAA,I;;AA/BhB;;;;AACA;;;;;;AAEA,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,UAA1B,EAAsC;AACpCA,eAAaA,cAAc,GAA3B;AACA,SAAO,UAASC,GAAT,EAAc;AACnBC,YAAQC,GAAR,CAAYF,GAAZ;AACA,WAAOF,IAAIK,MAAJ,CAAWJ,UAAX,EAAuBK,IAAvB,CAA4BJ,GAA5B,CAAP;AACD,GAHD;AAID;;AAED;;;AAGO,SAASL,MAAT,CAAgBU,GAAhB,EAAqBP,GAArB,EAA0B;AAC/B,SAAO,kBAAQQ,OAAR,CAAgB,EAAEC,QAAQF,IAAIG,MAAJ,CAAWD,MAArB,EAAhB,EACJE,QADI,CACK;AACRC,UAAM,iBADE;AAERC,YAAQ,aAFA;AAGRC;AAHQ,GADL,EAMJC,IANI,GAOJC,IAPI,CAOC,mBAAW;AACfhB,QAAIiB,IAAJ,CAASC,OAAT;AACD,GATI,EAUJC,KAVI,CAUEpB,YAAYC,GAAZ,CAVF,CAAP;AAWD;;AAED;;;AAGO,SAASF,IAAT,CAAcS,GAAd,EAAmBP,GAAnB,EAAwB;AAC7B,SAAO,kBAAQQ,OAAR,CAAgB,EAAEC,QAAQF,IAAIG,MAAJ,CAAWD,MAArB,EAAhB,EAA+CM,IAA/C,GACJC,IADI,CACC,mBAAW;AACf,QAAGE,OAAH,EAAY;AACVA,cAAQE,QAAR,CAAiBC,IAAjB,CAAsB;AACpBC,gBAAQf,IAAIgB,IAAJ,CAASC,GADG;AAEpBC,oBAAYC,KAAKC,GAAL,EAFQ;AAGpBC,cAAMrB,IAAIsB,IAAJ,CAASX;AAHK,OAAtB;;AAMA,aAAOA,QAAQpB,IAAR,EAAP;AACD,KARD,MAQO;AACL,UAAIgC,aAAa,sBAAY;AAC3BrB,gBAAQF,IAAIG,MAAJ,CAAWD,MADQ;AAE3BW,kBAAU,CAAC;AACTE,kBAAQf,IAAIgB,IAAJ,CAASC,GADR;AAETI,gBAAMrB,IAAIsB,IAAJ,CAASX;AAFN,SAAD;AAFiB,OAAZ,CAAjB;;AAQA,aAAOY,WAAWhC,IAAX,EAAP;AACD;AACF,GArBI,EAsBJkB,IAtBI,CAsBC,mBAAW;AACf,WAAOE,QAAQP,QAAR,CAAiB;AACtBC,YAAM,iBADgB;AAEtBC,cAAQ,aAFc;AAGtBC;AAHsB,KAAjB,EAIJiB,YAJI,EAAP;AAKD,GA5BI,EA6BJf,IA7BI,CA6BC,mBAAW;AACfhB,QAAIiB,IAAJ,CAASC,OAAT;AACD,GA/BI,EAgCJC,KAhCI,CAgCEpB,YAAYC,GAAZ,CAhCF,CAAP;AAiCD","file":"comment.controller.js","sourcesContent":["'use strict';\n\nimport Comment from './comment.model';\nimport User from '../user/user.model';\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    console.log(err);\n    return res.status(statusCode).send(err);\n  };\n}\n\n/**\n * gets all comments for book\n */\nexport function getAll(req, res) {\n  return Comment.findOne({ bookId: req.params.bookId })\n    .populate({\n      path: 'messages.author',\n      select: 'displayName',\n      model: User\n    })\n    .exec()\n    .then(comment => {\n      res.json(comment);\n    })\n    .catch(handleError(res));\n}\n\n/**\n * Saves new comment from book\n */\nexport function save(req, res) {\n  return Comment.findOne({ bookId: req.params.bookId }).exec()\n    .then(comment => {\n      if(comment) {\n        comment.messages.push({\n          author: req.user._id,\n          created_at: Date.now(),\n          text: req.body.comment\n        });\n\n        return comment.save();\n      } else {\n        let newComment = new Comment({\n          bookId: req.params.bookId,\n          messages: [{\n            author: req.user._id,\n            text: req.body.comment\n          }]\n        });\n\n        return newComment.save();\n      }\n    })\n    .then(comment => {\n      return comment.populate({\n        path: 'messages.author',\n        select: 'displayName',\n        model: User\n      }).execPopulate();\n    })\n    .then(comment => {\n      res.json(comment);\n    })\n    .catch(handleError(res));\n}\n"]}