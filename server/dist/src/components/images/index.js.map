{"version":3,"sources":["components/images/index.js"],"names":["loadImage","removeImage","lwip","promisifyAll","require","prototype","fs","normalize","path","options","imgPath","resolve","reject","openAsync","then","img","resizeAsync","width","height","index","indexOf","tmpPath","slice","__dirname","pathTo","writeFileAsync","unlinkAsync","catch","err","imageUrl"],"mappings":"AAAA;;;;;QASgBA,S,GAAAA,S;QAuBAC,W,GAAAA,W;;AA9BhB;;;;;;AACA,IAAMC,OAAO,mBAAQC,YAAR,CAAqBC,QAAQ,MAAR,CAArB,CAAb;AACA,mBAAQD,YAAR,CAAqBC,QAAQ,gBAAR,EAA0BC,SAA/C;AACA,mBAAQF,YAAR,CAAqBC,QAAQ,gBAAR,EAA0BC,SAA/C;AACA,IAAMC,KAAK,mBAAQH,YAAR,CAAqBC,QAAQ,IAAR,CAArB,CAAX;AACA,IAAMG,YAAYH,QAAQ,MAAR,EAAgBG,SAAlC;;AAEO,SAASP,SAAT,CAAmBQ,IAAnB,EAAyBC,OAAzB,EAAkC;AACvC,MAAIC,gBAAJ;AACA,SAAO,uBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,WAAOV,KAAKW,SAAL,CAAeL,IAAf,EACJM,IADI,CACC,eAAO;AACX,aAAOC,IAAIC,WAAJ,CAAgBP,QAAQQ,KAAxB,EAA+BR,QAAQS,MAAvC,CAAP;AACD,KAHI,EAIJJ,IAJI,CAIC,eAAO;AACX,UAAMK,QAAQX,KAAKY,OAAL,CAAa,SAAb,CAAd;AACA,UAAMC,UAAUb,KAAKc,KAAL,CAAWH,QAAQ,CAAnB,CAAhB;AACAT,gBAAUH,UAAUgB,YAAY,cAAZ,GAA6Bd,QAAQe,MAArC,GAA8CH,OAAxD,CAAV;AACA,aAAON,IAAIU,cAAJ,CAAmBf,OAAnB,CAAP;AACD,KATI,EAUJI,IAVI,CAUC,YAAM;AACV,aAAOR,GAAGoB,WAAH,CAAelB,IAAf,CAAP;AACD,KAZI,EAaJM,IAbI,CAaC,YAAM;AACVH,cAAQD,QAAQY,KAAR,CAAcZ,QAAQU,OAAR,CAAgB,IAAhB,IAAwB,CAAtC,CAAR;AACD,KAfI,EAgBJO,KAhBI,CAgBE;AAAA,aAAOf,OAAOgB,GAAP,CAAP;AAAA,KAhBF,CAAP;AAiBD,GAlBM,CAAP;AAmBD;;AAEM,SAAS3B,WAAT,CAAqB4B,QAArB,EAA+B;AACpC,SAAO,uBAAY,UAAClB,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMJ,OAAOD,UAAUgB,YAAY,WAAZ,GAA0BM,QAApC,CAAb;AACA,WAAOvB,GAAGoB,WAAH,CAAelB,IAAf,EACJM,IADI,CACC,YAAM;AACVH;AACD,KAHI,EAIJgB,KAJI,CAIE;AAAA,aAAOf,OAAOgB,GAAP,CAAP;AAAA,KAJF,CAAP;AAKD,GAPM,CAAP;AAQD","file":"index.js","sourcesContent":["'use strict';\n\nimport Promise from 'bluebird';\nconst lwip = Promise.promisifyAll(require('lwip'));\nPromise.promisifyAll(require('lwip/lib/Image').prototype);\nPromise.promisifyAll(require('lwip/lib/Batch').prototype);\nconst fs = Promise.promisifyAll(require('fs'));\nconst normalize = require('path').normalize;\n\nexport function loadImage(path, options) {\n  let imgPath;\n  return new Promise((resolve, reject) => {\n    return lwip.openAsync(path)\n      .then(img => {\n        return img.resizeAsync(options.width, options.height);\n      })\n      .then(img => {\n        const index = path.indexOf('uploads');\n        const tmpPath = path.slice(index + 7);\n        imgPath = normalize(__dirname + '/../../../fs' + options.pathTo + tmpPath);\n        return img.writeFileAsync(imgPath);\n      })\n      .then(() => {\n        return fs.unlinkAsync(path);\n      })\n      .then(() => {\n        resolve(imgPath.slice(imgPath.indexOf('fs') - 1));\n      })\n      .catch(err => reject(err));\n  });\n}\n\nexport function removeImage(imageUrl) {\n  return new Promise((resolve, reject) => {\n    const path = normalize(__dirname + '/../../..' + imageUrl);\n    return fs.unlinkAsync(path)\n      .then(() => {\n        resolve();\n      })\n      .catch(err => reject(err));\n  });\n}\n"]}