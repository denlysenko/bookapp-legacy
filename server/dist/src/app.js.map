{"version":3,"sources":["app.js"],"names":["Promise","require","connect","mongo","uri","options","connection","on","err","console","error","process","exit","seedDB","startServer","app","angularFullstack","server","listen","port","ip","log","get","isMaster","cpuCount","cpus","length","i","fork","createServer","socketio","default","exports","module"],"mappings":"AAAA;;;;AAIA;;;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAHA,mBAASA,OAAT,GAAmBC,QAAQ,UAAR,CAAnB;;;AAKA;AACA,mBAASC,OAAT,CAAiB,sBAAOC,KAAP,CAAaC,GAA9B,EAAmC,sBAAOD,KAAP,CAAaE,OAAhD;AACA,mBAASC,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,UAASC,GAAT,EAAc;AAC5CC,UAAQC,KAAR,gCAA2CF,GAA3C;AACAG,UAAQC,IAAR,CAAa,CAAC,CAAd,EAF4C,CAE1B;AACnB,CAHD;;AAKA;AACA,IAAG,sBAAOC,MAAV,EAAkB;AAChBZ,UAAQ,eAAR;AACD;;AAED;AACA,SAASa,WAAT,GAAuB;AACrBC,MAAIC,gBAAJ,GAAuBC,OAAOC,MAAP,CAAc,sBAAOC,IAArB,EAA2B,sBAAOC,EAAlC,EAAsC,YAAW;AACtEX,YAAQY,GAAR,CAAY,4CAAZ,EAA0D,sBAAOF,IAAjE,EAAuEJ,IAAIO,GAAJ,CAAQ,KAAR,CAAvE;AACD,GAFsB,CAAvB;AAGD;;AAED,IAAG,kBAAQC,QAAX,EAAqB;AACnB,MAAIC,WAAWvB,QAAQ,IAAR,EAAcwB,IAAd,GAAqBC,MAApC;;AAEA;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,QAApB,EAA8BG,KAAK,CAAnC,EAAsC;AACpC,sBAAQC,IAAR;AACD;;AAED;AACA,oBAAQrB,EAAR,CAAW,MAAX,EAAmB,YAAY;AAC7B,sBAAQqB,IAAR;AACD,GAFD;AAGD,CAZD,MAYO;;AAEP;AACE,MAAIb,MAAM,wBAAV;AACA,MAAIE,SAAS,eAAKY,YAAL,CAAkBd,GAAlB,CAAb;AACA,MAAIe,WAAW7B,QAAQ,WAAR,EAAqBgB,MAArB,CAAf;AACAhB,UAAQ,mBAAR,EAA6B8B,OAA7B,CAAqCD,QAArC;AACA7B,UAAQ,kBAAR,EAA4B8B,OAA5B,CAAoChB,GAApC;AACAd,UAAQ,UAAR,EAAoB8B,OAApB,CAA4BhB,GAA5B;;AAEA,8BAAaD,WAAb;AACD;;AAED;AACAkB,UAAUC,OAAOD,OAAP,GAAiBjB,GAA3B","file":"app.js","sourcesContent":["/**\n * Main application file\n */\n\n'use strict';\n\nimport express from 'express';\nimport mongoose from 'mongoose';\nmongoose.Promise = require('bluebird');\nimport config from './config/environment';\nimport http from 'http';\nimport cluster from 'cluster';\n\n// Connect to MongoDB\nmongoose.connect(config.mongo.uri, config.mongo.options);\nmongoose.connection.on('error', function(err) {\n  console.error(`MongoDB connection error: ${err}`);\n  process.exit(-1); // eslint-disable-line no-process-exit\n});\n\n// Populate databases with sample data\nif(config.seedDB) {\n  require('./config/seed');\n}\n\n// Start server\nfunction startServer() {\n  app.angularFullstack = server.listen(config.port, config.ip, function() {\n    console.log('Express server listening on %d, in %s mode', config.port, app.get('env'));\n  });\n}\n\nif(cluster.isMaster) {\n  var cpuCount = require('os').cpus().length;\n\n  // Create a worker for each CPU\n  for (var i = 0; i < cpuCount; i += 1) {\n    cluster.fork();\n  }\n\n  // Listen for dying workers\n  cluster.on('exit', function () {\n    cluster.fork();\n  });\n} else {\n\n// Setup server\n  var app = express();\n  var server = http.createServer(app);\n  var socketio = require('socket.io')(server);\n  require('./config/socketio').default(socketio);\n  require('./config/express').default(app);\n  require('./routes').default(app);\n\n  setImmediate(startServer);\n}\n\n// Expose app\nexports = module.exports = app;\n"]}