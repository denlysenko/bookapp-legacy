{"version":3,"sources":["api/user/user.model.js"],"names":["Promise","require","validateLocalStrategyProperty","property","provider","updated","length","validateLocalStrategyPassword","password","UserSchema","firstName","type","String","trim","default","validate","lastName","displayName","email","match","salt","avatarUrl","roles","enum","Date","created","now","reading","epubUrl","bookmark","resetPasswordToken","resetPasswordExpires","virtual","get","_id","path","value","respond","constructor","findOne","exec","then","user","id","catch","err","pre","next","isModified","makeSalt","saltErr","encryptPassword","encryptErr","hashedPassword","methods","authenticate","callback","pwdGen","byteSize","defaultByteSize","arguments","Error","randomBytes","toString","defaultIterations","defaultKeyLength","Buffer","pbkdf2Sync","pbkdf2","key","model"],"mappings":"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","file":"user.model.js","sourcesContent":["'use strict';\n/*eslint no-invalid-this:0*/\nimport crypto from 'crypto';\nmongoose.Promise = require('bluebird');\nimport mongoose, {Schema} from 'mongoose';\n\n/**\n* A Validation function for local strategy properties\n*/\nconst validateLocalStrategyProperty = function(property) {\n  return ((this.provider !== 'local' && !this.updated) || property.length);\n};\n\n/**\n * A Validation function for local strategy password\n */\nconst validateLocalStrategyPassword = function(password) {\n  return (this.provider !== 'local' || (password && password.length > 6));\n};\n\nlet UserSchema = new Schema({\n  firstName: {\n    type: String,\n    trim: true,\n    default: '',\n    validate: [validateLocalStrategyProperty, 'Please, fill in your First Name']\n  },\n  lastName: {\n    type: String,\n    trim: true,\n    default: '',\n    validate: [validateLocalStrategyProperty, 'Please, fill in your Last Name']\n  },\n  displayName: {\n    type: String,\n    trim: true\n  },\n  email: {\n    type: String,\n    trim: true,\n    validate: [validateLocalStrategyProperty, 'Please fill in your Email'],\n    match: [/.+\\@.+\\..+/, 'Please fill a valid email address']\n  },\n  password: {\n    type: String,\n    default: '',\n    validate: [validateLocalStrategyPassword, 'Password should contain at least 6 characters']\n  },\n  salt: String,\n  provider: String,\n  avatarUrl: {\n    type: String,\n    default: '/fs/avatars/default-avatar.png'\n  },\n  roles: {\n    type: [{ type: String, enum: [ 'user', 'admin' ] }],\n    default: [ 'user' ]\n  },\n  updated: Date,\n  created: {\n    type: Date,\n    default: Date.now\n  },\n  reading: {\n    epubUrl: {\n      type: String,\n      default: ''\n    },\n    bookmark: {\n      type: String,\n      default: ''\n    }\n  },\n  resetPasswordToken: String,\n  resetPasswordExpires: Date\n});\n\n/**\n * Virtuals\n */\n\n// Non-sensitive info we'll be putting in the token\nUserSchema\n  .virtual('token')\n  .get(function() {\n    return {\n      _id: this._id\n    };\n  });\n\n/**\n * Validations\n */\n\n// Validate email is not taken\nUserSchema\n  .path('email')\n  .validate(function(value, respond) {\n    return this.constructor.findOne({ email: value }).exec()\n      .then(user => {\n        if(user) {\n          if(this.id === user.id) {\n            return respond(true);\n          }\n          return respond(false);\n        }\n        return respond(true);\n      })\n      .catch(function(err) {\n        throw err;\n      });\n  }, 'The specified email address is already in use.');\n\n/**\n * Pre-save hook\n */\nUserSchema\n  .pre('save', function(next) {\n    // Handle new/update passwords\n    if(!this.isModified('password')) {\n      return next();\n    }\n\n    // Make salt with a callback\n    this.makeSalt((saltErr, salt) => {\n      if(saltErr) {\n        return next(saltErr);\n      }\n      this.salt = salt;\n      this.encryptPassword(this.password, (encryptErr, hashedPassword) => {\n        if(encryptErr) {\n          return next(encryptErr);\n        }\n        this.password = hashedPassword;\n        return next();\n      });\n    });\n  });\n\n/**\n * Methods\n */\nUserSchema.methods = {\n  /**\n   * Authenticate - check if the passwords are the same\n   *\n   * @param {String} password\n   * @param {Function} callback\n   * @return {Boolean}\n   * @api public\n   */\n  authenticate(password, callback) {\n    if(!callback) {\n      return this.password === this.encryptPassword(password);\n    }\n\n    this.encryptPassword(password, (err, pwdGen) => {\n      if(err) {\n        return callback(err);\n      }\n\n      if(this.password === pwdGen) {\n        return callback(null, true);\n      } else {\n        return callback(null, false);\n      }\n    });\n  },\n\n  /**\n   * Make salt\n   *\n   * @param {Number} [byteSize] - Optional salt byte size, default to 16\n   * @param {Function} callback\n   * @return {String}\n   * @api public\n   */\n  makeSalt(byteSize, callback) {\n    var defaultByteSize = 16;\n\n    if(typeof arguments[0] === 'function') {\n      callback = arguments[0];\n      byteSize = defaultByteSize;\n    } else if(typeof arguments[1] === 'function') {\n      callback = arguments[1];\n    } else {\n      throw new Error('Missing Callback');\n    }\n\n    if(!byteSize) {\n      byteSize = defaultByteSize;\n    }\n\n    return crypto.randomBytes(byteSize, (err, salt) => {\n      if(err) {\n        return callback(err);\n      } else {\n        return callback(null, salt.toString('base64'));\n      }\n    });\n  },\n\n  /**\n   * Encrypt password\n   *\n   * @param {String} password\n   * @param {Function} callback\n   * @return {String}\n   * @api public\n   */\n  encryptPassword(password, callback) {\n    if(!password || !this.salt) {\n      if(!callback) {\n        return null;\n      } else {\n        return callback('Missing password or salt');\n      }\n    }\n\n    var defaultIterations = 10000;\n    var defaultKeyLength = 64;\n    var salt = new Buffer(this.salt, 'base64');\n\n    if(!callback) {\n      return crypto.pbkdf2Sync(password, salt, defaultIterations, defaultKeyLength, 'sha512')\n        .toString('base64');\n    }\n\n    return crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength, 'sha512', (err, key) => {\n      if(err) {\n        return callback(err);\n      } else {\n        return callback(null, key.toString('base64'));\n      }\n    });\n  }\n};\n\nexport default mongoose.model('User', UserSchema);\n"]}